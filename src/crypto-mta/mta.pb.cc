// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mta.proto

#include "mta.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_zkp_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_DLogProof_zkp_2eproto;
namespace safeheron {
namespace proto {
class MtaMessageBDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MtaMessageB> _instance;
} _MtaMessageB_default_instance_;
}  // namespace proto
}  // namespace safeheron
static void InitDefaultsMtaMessageB_mta_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::safeheron::proto::_MtaMessageB_default_instance_;
    new (ptr) ::safeheron::proto::MtaMessageB();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::safeheron::proto::MtaMessageB::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_MtaMessageB_mta_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMtaMessageB_mta_2eproto}, {
      &scc_info_DLogProof_zkp_2eproto.base,}};

void InitDefaults_mta_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_MtaMessageB_mta_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_mta_2eproto[1];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_mta_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_mta_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_mta_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::MtaMessageB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::MtaMessageB, c_b_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::MtaMessageB, dlog_proof_b_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::MtaMessageB, dlog_proof_beta_tag_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::safeheron::proto::MtaMessageB)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::safeheron::proto::_MtaMessageB_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_mta_2eproto = {
  {}, AddDescriptors_mta_2eproto, "mta.proto", schemas,
  file_default_instances, TableStruct_mta_2eproto::offsets,
  file_level_metadata_mta_2eproto, 1, file_level_enum_descriptors_mta_2eproto, file_level_service_descriptors_mta_2eproto,
};

const char descriptor_table_protodef_mta_2eproto[] =
  "\n\tmta.proto\022\017safeheron.proto\032\tzkp.proto\""
  "\205\001\n\013MtaMessageB\022\013\n\003c_b\030\001 \001(\t\0220\n\014dlog_pro"
  "of_b\030\002 \001(\0132\032.safeheron.proto.DLogProof\0227"
  "\n\023dlog_proof_beta_tag\030\003 \001(\0132\032.safeheron."
  "proto.DLogProofb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_mta_2eproto = {
  false, InitDefaults_mta_2eproto, 
  descriptor_table_protodef_mta_2eproto,
  "mta.proto", &assign_descriptors_table_mta_2eproto, 183,
};

void AddDescriptors_mta_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_zkp_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_mta_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_mta_2eproto = []() { AddDescriptors_mta_2eproto(); return true; }();
namespace safeheron {
namespace proto {

// ===================================================================

void MtaMessageB::InitAsDefaultInstance() {
  ::safeheron::proto::_MtaMessageB_default_instance_._instance.get_mutable()->dlog_proof_b_ = const_cast< ::safeheron::proto::DLogProof*>(
      ::safeheron::proto::DLogProof::internal_default_instance());
  ::safeheron::proto::_MtaMessageB_default_instance_._instance.get_mutable()->dlog_proof_beta_tag_ = const_cast< ::safeheron::proto::DLogProof*>(
      ::safeheron::proto::DLogProof::internal_default_instance());
}
class MtaMessageB::HasBitSetters {
 public:
  static const ::safeheron::proto::DLogProof& dlog_proof_b(const MtaMessageB* msg);
  static const ::safeheron::proto::DLogProof& dlog_proof_beta_tag(const MtaMessageB* msg);
};

const ::safeheron::proto::DLogProof&
MtaMessageB::HasBitSetters::dlog_proof_b(const MtaMessageB* msg) {
  return *msg->dlog_proof_b_;
}
const ::safeheron::proto::DLogProof&
MtaMessageB::HasBitSetters::dlog_proof_beta_tag(const MtaMessageB* msg) {
  return *msg->dlog_proof_beta_tag_;
}
void MtaMessageB::clear_dlog_proof_b() {
  if (GetArenaNoVirtual() == nullptr && dlog_proof_b_ != nullptr) {
    delete dlog_proof_b_;
  }
  dlog_proof_b_ = nullptr;
}
void MtaMessageB::clear_dlog_proof_beta_tag() {
  if (GetArenaNoVirtual() == nullptr && dlog_proof_beta_tag_ != nullptr) {
    delete dlog_proof_beta_tag_;
  }
  dlog_proof_beta_tag_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MtaMessageB::kCBFieldNumber;
const int MtaMessageB::kDlogProofBFieldNumber;
const int MtaMessageB::kDlogProofBetaTagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MtaMessageB::MtaMessageB()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:safeheron.proto.MtaMessageB)
}
MtaMessageB::MtaMessageB(const MtaMessageB& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  c_b_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.c_b().size() > 0) {
    c_b_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.c_b_);
  }
  if (from.has_dlog_proof_b()) {
    dlog_proof_b_ = new ::safeheron::proto::DLogProof(*from.dlog_proof_b_);
  } else {
    dlog_proof_b_ = nullptr;
  }
  if (from.has_dlog_proof_beta_tag()) {
    dlog_proof_beta_tag_ = new ::safeheron::proto::DLogProof(*from.dlog_proof_beta_tag_);
  } else {
    dlog_proof_beta_tag_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:safeheron.proto.MtaMessageB)
}

void MtaMessageB::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_MtaMessageB_mta_2eproto.base);
  c_b_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&dlog_proof_b_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dlog_proof_beta_tag_) -
      reinterpret_cast<char*>(&dlog_proof_b_)) + sizeof(dlog_proof_beta_tag_));
}

MtaMessageB::~MtaMessageB() {
  // @@protoc_insertion_point(destructor:safeheron.proto.MtaMessageB)
  SharedDtor();
}

void MtaMessageB::SharedDtor() {
  c_b_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete dlog_proof_b_;
  if (this != internal_default_instance()) delete dlog_proof_beta_tag_;
}

void MtaMessageB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MtaMessageB& MtaMessageB::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_MtaMessageB_mta_2eproto.base);
  return *internal_default_instance();
}


void MtaMessageB::Clear() {
// @@protoc_insertion_point(message_clear_start:safeheron.proto.MtaMessageB)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  c_b_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && dlog_proof_b_ != nullptr) {
    delete dlog_proof_b_;
  }
  dlog_proof_b_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && dlog_proof_beta_tag_ != nullptr) {
    delete dlog_proof_beta_tag_;
  }
  dlog_proof_beta_tag_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MtaMessageB::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<MtaMessageB*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string c_b = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("safeheron.proto.MtaMessageB.c_b");
        object = msg->mutable_c_b();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .safeheron.proto.DLogProof dlog_proof_b = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::safeheron::proto::DLogProof::_InternalParse;
        object = msg->mutable_dlog_proof_b();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .safeheron.proto.DLogProof dlog_proof_beta_tag = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::safeheron::proto::DLogProof::_InternalParse;
        object = msg->mutable_dlog_proof_beta_tag();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MtaMessageB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:safeheron.proto.MtaMessageB)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string c_b = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_c_b()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->c_b().data(), static_cast<int>(this->c_b().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "safeheron.proto.MtaMessageB.c_b"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .safeheron.proto.DLogProof dlog_proof_b = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dlog_proof_b()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .safeheron.proto.DLogProof dlog_proof_beta_tag = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dlog_proof_beta_tag()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:safeheron.proto.MtaMessageB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:safeheron.proto.MtaMessageB)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MtaMessageB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:safeheron.proto.MtaMessageB)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string c_b = 1;
  if (this->c_b().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->c_b().data(), static_cast<int>(this->c_b().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.MtaMessageB.c_b");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->c_b(), output);
  }

  // .safeheron.proto.DLogProof dlog_proof_b = 2;
  if (this->has_dlog_proof_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::dlog_proof_b(this), output);
  }

  // .safeheron.proto.DLogProof dlog_proof_beta_tag = 3;
  if (this->has_dlog_proof_beta_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::dlog_proof_beta_tag(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:safeheron.proto.MtaMessageB)
}

::google::protobuf::uint8* MtaMessageB::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:safeheron.proto.MtaMessageB)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string c_b = 1;
  if (this->c_b().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->c_b().data(), static_cast<int>(this->c_b().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.MtaMessageB.c_b");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->c_b(), target);
  }

  // .safeheron.proto.DLogProof dlog_proof_b = 2;
  if (this->has_dlog_proof_b()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::dlog_proof_b(this), target);
  }

  // .safeheron.proto.DLogProof dlog_proof_beta_tag = 3;
  if (this->has_dlog_proof_beta_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::dlog_proof_beta_tag(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safeheron.proto.MtaMessageB)
  return target;
}

size_t MtaMessageB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safeheron.proto.MtaMessageB)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string c_b = 1;
  if (this->c_b().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->c_b());
  }

  // .safeheron.proto.DLogProof dlog_proof_b = 2;
  if (this->has_dlog_proof_b()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *dlog_proof_b_);
  }

  // .safeheron.proto.DLogProof dlog_proof_beta_tag = 3;
  if (this->has_dlog_proof_beta_tag()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *dlog_proof_beta_tag_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MtaMessageB::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:safeheron.proto.MtaMessageB)
  GOOGLE_DCHECK_NE(&from, this);
  const MtaMessageB* source =
      ::google::protobuf::DynamicCastToGenerated<MtaMessageB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:safeheron.proto.MtaMessageB)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:safeheron.proto.MtaMessageB)
    MergeFrom(*source);
  }
}

void MtaMessageB::MergeFrom(const MtaMessageB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safeheron.proto.MtaMessageB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.c_b().size() > 0) {

    c_b_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.c_b_);
  }
  if (from.has_dlog_proof_b()) {
    mutable_dlog_proof_b()->::safeheron::proto::DLogProof::MergeFrom(from.dlog_proof_b());
  }
  if (from.has_dlog_proof_beta_tag()) {
    mutable_dlog_proof_beta_tag()->::safeheron::proto::DLogProof::MergeFrom(from.dlog_proof_beta_tag());
  }
}

void MtaMessageB::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:safeheron.proto.MtaMessageB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MtaMessageB::CopyFrom(const MtaMessageB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safeheron.proto.MtaMessageB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MtaMessageB::IsInitialized() const {
  return true;
}

void MtaMessageB::Swap(MtaMessageB* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MtaMessageB::InternalSwap(MtaMessageB* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  c_b_.Swap(&other->c_b_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(dlog_proof_b_, other->dlog_proof_b_);
  swap(dlog_proof_beta_tag_, other->dlog_proof_beta_tag_);
}

::google::protobuf::Metadata MtaMessageB::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_mta_2eproto);
  return ::file_level_metadata_mta_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace safeheron
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::safeheron::proto::MtaMessageB* Arena::CreateMaybeMessage< ::safeheron::proto::MtaMessageB >(Arena* arena) {
  return Arena::CreateInternal< ::safeheron::proto::MtaMessageB >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
